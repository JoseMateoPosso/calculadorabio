calculateElectricFootprint(energyConsumption, numPeople, yearM, electricFactor) {
  let totalElectricFootPrint = energyConsumption * yearM * electricFactor * 0.001;
  return totalElectricFootPrint / numPeople;
}

calculateTransportFootprint(transportType, transportFuelType, numKilometers, yearD, transportFactors, carPerformances) {
  const transportFootprintMethods = {
    '1': () => numKilometers * yearD * transportFactors.masiveFactor * 0.001,
    '2': () => {
      let carFactor = transportFactors[transportFuelType] || transportFactors.hibridFactor;
      let carPerformance = carPerformances[transportFuelType] || 1;
      return numKilometers * yearD * (1 / carPerformance) * carFactor * 0.001;
    },
    '3': () => {
      let bikeFactor = transportFactors[transportFuelType] || transportFactors.gasoFactor;
      return numKilometers * yearD * (1 / carPerformances.gasoBikePerformance) * bikeFactor * 0.001;
    },
    'default': () => 0,
  };
  return (transportFootprintMethods[transportType] || transportFootprintMethods['default'])();
}

calculateKitchenFootprint(numPeople, cubicMeters, yearM, fuelType, solidFuel, solidFuelWeight, kitchenFactors) {
  let factor = kitchenFactors[fuelType] || kitchenFactors.palmFactor;
  if (fuelType === "combustiblesolido") {
    factor = kitchenFactors[solidFuel] || factor;
  }
  let footprint = cubicMeters * yearM * factor * 0.001;
  return footprint / numPeople;
}

calculateRecycleFootprint(recycle) {
  return recycle === 1 ? -0.230 : 0;
}

CalculateFootprint(numSelected) {
  if (numSelected) {
    console.log(numSelected);
  }

  let { 
    numPeople, 
    energyConsumption, 
    fuelType, 
    solidFuelWeight, 
    solidFuel, 
    cubicMeters, 
    transportType, 
    transportFuelType, 
    numKilometers, 
    recycle 
  } = this.CarbonFootPrint;

  let footPrintFactors = {
    electricFactor: 0.126,
    transportFactors: {
      acpmFactor: 10.15,
      gasoFactor: 8.15,
      gasFactor: 1.9801,
      electricCarFactor: 0.126,
      hibridFactor: 4.135,
      masiveFactor: 1.0189,
    },
    carPerformances: {
      acpmCarPerformance: 70,
      gasoCarPerformance: 54,
      gasoBikePerformance: 121,
      gasCarPerformance: 22,
    },
    kitchenFactors: {
      naturalFactor: 1.9801,
      propaneFactor: 8.2100,
      bagazoFactor: 1.68,
      carbonFactor: 2.45,
      palmFactor: 1.93,
      woodFactor: 1.84,
      le√±aFactor: 1.15,
    }
  };

  let yearM = 12;
  let yearD = 365;

  let electricFootPrint = this.calculateElectricFootprint(energyConsumption, numPeople, yearM, footPrintFactors.electricFactor);
  let transportFootPrint = this.calculateTransportFootprint(transportType, transportFuelType, numKilometers, yearD, footPrintFactors.transportFactors, footPrintFactors.carPerformances);
  let kitchenFootPrint = this.calculateKitchenFootprint(numPeople, cubicMeters, yearM, fuelType, solidFuel, solidFuelWeight, footPrintFactors.kitchenFactors);
  let recycleFootPrint = this.calculateRecycleFootprint(recycle);
  let finalCarbonFootPrint = electricFootPrint + transportFootPrint + kitchenFootPrint + recycleFootPrint;

  console.log("final: " + finalCarbonFootPrint + " electric: " + electricFootPrint + " transport: " + transportFootPrint + " kitchen: " + kitchenFootPrint + " recycle: " + recycleFootPrint);
  return { finalCarbonFootPrint: finalCarbonFootPrint };
}
